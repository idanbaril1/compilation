/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());		
		System.out.print("] ");	
		System.out.print(message);
		System.out.print(info.toString());		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());	
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ARRAY;
terminal COMMA;
terminal NIL;
terminal RETURN;
terminal NEW;
terminal LT;
terminal GT;
terminal CLASS;
terminal EXTENDS;
terminal ERROR;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_DEC dec;
non terminal AST_NEW_EXP newExp;
non terminal AST_TYPE type;
non terminal AST_DEC_ARRAY arrayTypedef;
non terminal AST_DEC_CLASS classDec;
non terminal AST_DEC_VAR varDec;
non terminal AST_ARG arg;
non terminal AST_DEC_FUNC funcDec;
non terminal AST_CFIELD cField;
non terminal AST_DEC_LIST decList;
non terminal AST_EXP_LIST expList;
non terminal AST_ARGS_LIST argsList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_PROGRAM Program;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

decList		::=		dec:d	decList:dl		{: RESULT = new AST_DEC_LIST(d,dl);    :}
					| dec:d					{: RESULT = new AST_DEC_LIST(d,null); :}
					;

expList		::=		exp:e COMMA	expList:el		{: RESULT = new AST_EXP_LIST(e,el);    :}
					| exp:e					{: RESULT = new AST_EXP_LIST(e,null); :}
					;
argsList	::=		arg:a COMMA	argsList:al		{: RESULT = new AST_ARGS_LIST(a,al);    :}
					| arg:a						{: RESULT = new AST_ARGS_LIST(a,null); :}
					;
cFieldList	::=		cField:cf cFieldList:cfl		{: RESULT = new AST_CFIELD_LIST(cf,cfl);    :}
					| cField:cf							{: RESULT = new AST_CFIELD_LIST(cf,null); :}
					;
type		::=		TYPE_INT						{: RESULT = new AST_TYPE("TYPE_INT");      :}
					| TYPE_STRING					{: RESULT = new AST_TYPE("TYPE_STRING");      :}
					| TYPE_VOID						{: RESULT = new AST_TYPE("TYPE_VOID");      :}
					| ID:t							{: RESULT = new AST_TYPE(t);      :}
					;	
arg			::=		type:t ID:name			{: RESULT = new AST_ARG(t, name);       :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| var:v ASSIGN newExp:ne SEMICOLON							{: RESULT = new AST_STMT_ASSIGN_NEW(v,ne); :}
					| RETURN  SEMICOLON											{: RESULT = new AST_STMT_RETURN(null); :}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e); :}
					| ID:fieldName LPAREN expList:l RPAREN SEMICOLON			{: RESULT = new AST_STMT_SUBSCRIPT(null,fieldName,l); :}
					| var:v DOT ID:fieldName LPAREN expList:l RPAREN SEMICOLON	{: RESULT = new AST_STMT_SUBSCRIPT(v,fieldName,l); :}
					| varDec:vd 												{: RESULT = new AST_STMT_VAR_DEC(vd); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_PAREN(e);:}
					| var:v DOT ID:fieldName LPAREN expList:l RPAREN	{: RESULT = new AST_EXP_SUBSCRIPT(v,fieldName,l);:}
					| ID:fieldName LPAREN expList:l RPAREN				{: RESULT = new AST_EXP_SUBSCRIPT(null,fieldName,l);:}
					| ID:fieldName LPAREN RPAREN						{: RESULT = new AST_EXP_SUBSCRIPT(null,fieldName,null);:}
					| var:v DOT ID:fieldName LPAREN RPAREN				{: RESULT = new AST_EXP_SUBSCRIPT(v,fieldName,null);:}
					| MINUS INT:i							{: RESULT = new AST_EXP_INT(i);         :}
					| STRING:s							{: RESULT = new AST_EXP_STRING(s);      :}
					| NIL								{: RESULT = new AST_EXP_NIL();          :}
					;
dec			::=		varDec:v								{: RESULT = new AST_DEC(v);          :}
					| funcDec:f								{: RESULT = new AST_DEC(f);         :}
					| classDec:c							{: RESULT = new AST_DEC(c); :}
					| arrayTypedef:a						{: RESULT = new AST_DEC(a); :}
					;
Program		::=		decList:dl								{: RESULT = new AST_PROGRAM(dl);      :}
					;
newExp		::=		NEW type:t								{: RESULT = new AST_NEW_EXP_SIMPLE(t);      :}
					| NEW type:t LBRACK	exp:e RBRACK		{: RESULT = new AST_NEW_EXP_SUBSCRIPT(t,e); :}					
					;					
arrayTypedef::=		ARRAY ID:name ASSIGN type:t LBRACK RBRACK SEMICOLON		{: RESULT = new AST_DEC_ARRAY(name,t);      :}								
					;					
classDec	::=		CLASS ID:name LBRACE cFieldList:l RBRACE 	{: RESULT = new AST_DEC_CLASS(name,null,l);      :}
					| CLASS ID:name EXTENDS ID:fatherName LBRACE cFieldList:l RBRACE 	{: RESULT = new AST_DEC_CLASS(name,fatherName,l);      :}					
					;					
varDec		::=		type:t ID:name SEMICOLON				{: RESULT = new AST_DEC_VAR(name,t,null,null);      :}
					| type:t ID:name ASSIGN exp:e SEMICOLON	{: RESULT = new AST_DEC_VAR(name,t,e,null);      :}
					| type:t ID:name ASSIGN newExp:ne SEMICOLON	{: RESULT = new AST_DEC_VAR(name,t,null,ne);      :}
					;					
funcDec		::=		type:t ID:name LPAREN RPAREN LBRACE stmtList:l RBRACE		{: RESULT = new AST_DEC_FUNC(name,t,null,l);      :}
					| type:t ID:name LPAREN argsList:args RPAREN LBRACE stmtList:l RBRACE		{: RESULT = new AST_DEC_FUNC(name,t,args,l);      :}
					;
cField		::=		varDec:vd						{: RESULT = new AST_CFIELD_VAR(vd);      :}
					| funcDec:fd					{: RESULT = new AST_CFIELD_FUNC(fd);      :}
					;
				